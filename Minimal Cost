import java.util.*;
public class Solution {
    public static int minCost(int n,int k,int[] height,int[] dp){
        if(n==0){
            return 0;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        int minSteps=Integer.MAX_VALUE;
        for(int j=1;j<=k;j++){
            if(n-j>=0){
                int jump=minCost(n-j,k,height,dp)+Math.abs(height[n]-height[n-j]);
                minSteps=Math.min(minSteps,jump);
            }
        }
        return dp[n]=minSteps;
    }
    public static int minimizeCost(int n, int k, int []height){
        // Write your code here.
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        return minCost(n-1,k,height,dp);
    }
}
