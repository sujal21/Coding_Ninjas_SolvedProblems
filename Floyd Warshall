import java.util.*;

public class Solution {
    static int floydWarshall(int n, int m, int src, int dest, ArrayList<ArrayList<Integer>> edges) {
        // Write your code here.
        int[][] mat = new int[n][n];

        // Convert to 0-indexed format
        for (ArrayList<Integer> it : edges) {
            int u = it.get(0) - 1;
            int v = it.get(1) - 1;
            int wt = it.get(2);

            mat[u][v] = wt;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    mat[i][j] = 0;
                } else if (mat[i][j] == 0) {
                    mat[i][j] = Integer.MAX_VALUE;
                }
            }
        }

        for (int via = 0; via < n; via++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (mat[i][via] != Integer.MAX_VALUE && mat[via][j] != Integer.MAX_VALUE) {
                        mat[i][j] = Math.min(mat[i][j], mat[i][via] + mat[via][j]);
                    }
                }
            }
        }
        return mat[src - 1][dest - 1]==Integer.MAX_VALUE?(int)1e9:mat[src-1][dest-1];
    }
}
