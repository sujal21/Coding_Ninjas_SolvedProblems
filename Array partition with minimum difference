import java.util.*;
public class Solution {

    public static ArrayList<Integer> list=new ArrayList<>();

    public static void subsetSum(int[] arr,int sum){
        boolean[][] dp=new boolean[arr.length+1][sum+1];

        for(int i=0;i<=arr.length;i++){
            dp[i][0]=true;
        }

        for(int i=1;i<=arr.length;i++){
            for(int j=1;j<=sum;j++){
                if(arr[i-1]<=j){
                    dp[i][j]=dp[i-1][j] || dp[i-1][j-arr[i-1]];
                }else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }

        for(int i=0;i<=sum/2;i++){
            if(dp[arr.length][i]==true){
                list.add(i);
            }
        }
    }
    public static int minSubsetSumDifference(int []arr, int n) {
        // Write your code here.
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum=sum+arr[i];
        }

        subsetSum(arr,sum);

        int mini=Integer.MAX_VALUE;
        for(int i=0;i<list.size();i++){
            int num=2*list.get(i);
            if((sum-num)<mini){
                mini=sum-num;
            }
        }

        return mini;
    }
}
