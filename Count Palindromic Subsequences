import java.util.Arrays;

public class Solution {

    static final int MOD = 1000000007;

    public static int countPalindromicSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];

        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return rec(s, dp, 0, n - 1);
    }

    private static int rec(String str, int[][] dp, int i, int j) {
        int mod = 1000000007;

        if (i == j) return 1;
        if (i > j) return 0;

        if (dp[i][j] != -1) return dp[i][j];

        if (str.charAt(i) == str.charAt(j)) {
            dp[i][j] = (1 + rec(str, dp, i + 1, j) + rec(str, dp, i, j - 1)) % mod;
        } else {
            dp[i][j] = ((rec(str, dp, i + 1, j) + rec(str, dp, i, j - 1) - rec(str, dp, i + 1, j - 1)) % mod + mod) % mod;
        }

        return dp[i][j];
    }
}
