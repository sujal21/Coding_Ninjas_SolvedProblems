import java.util.*;
public class Solution 
{
    public static boolean dfs(int src,int[] vis,int[] pathvis,ArrayList<ArrayList<Integer>> adj){
        vis[src]=1;
        pathvis[src]=1;

        for(Integer it:adj.get(src)){
            if(vis[it]==0){
                if(dfs(it,vis,pathvis,adj)){
                    return true;
                }
            }else if(vis[it]==1 && pathvis[it]==1){
                return true;
            }
        }
        pathvis[src]=0;
        return false;
    }
    public static Boolean isCyclic(int[][] edges, int v, int e)
    {
        // Write your code here.
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<e;i++){
            int u=edges[i][0];
            int x=edges[i][1];

            adj.get(u).add(x);
        }

        int[] vis=new int[v];
        int[] pathvis=new int[v];
        for(int i=0;i<v;i++){
            if(vis[i]==0){
                if(dfs(i,vis,pathvis,adj)){
                    return true;
                }
            }
        }
        return false;
	}
}
