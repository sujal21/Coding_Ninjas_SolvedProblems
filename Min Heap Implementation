public class Solution {

    static class MinHeap {

        // Constructor for the class.
        private int[] heap;
        private int length;
        private int capacity;
        MinHeap(int size) {
            // Write your code here.
            heap=new int[size];
            length=0;
            capacity=size;
        }

        void minHeapify(int i){
            int mini=i;
            int left=2*i+1;
            int right=2*i+2;

            if(left<length && heap[left]<heap[mini]){
                mini=left;
            }
            if(right<length && heap[right]<heap[mini]){
                mini=right;
            }
            if(mini!=i){
                int temp=heap[mini];
                heap[mini]=heap[i];
                heap[i]=temp;
                minHeapify(mini);
            }
        }

        // Implement the function to remove minimum element.
        int extractMinElement() {
            // Write you code here.
            if(length==0){
                return -1;
            }
            int ans=heap[0];
            int temp=heap[0];
            heap[0]=heap[length-1];
            heap[length-1]=temp;
            length--;
            minHeapify(0);
            return ans;
        }

        // Implement the function to delete an element.
        void deleteElement(int ind) {
            // Write you code here.
            if(ind>=length){
                return;
            }
            int temp=heap[ind];
            heap[ind]=heap[length-1];
            heap[length-1]=temp;
            length--;
            minHeapify(ind);
        }

        // Implement the function to insert 'val' in the heap.
        void insert(int val) {
            // Write you code here.
            if(length==capacity){
                return;
            }
            heap[length]=val;
            length++;
            int idx=length-1;
            while(idx>0){
                int parent=(idx-1)/2;
                if(heap[parent]>heap[idx]){
                    int temp=heap[parent];
                    heap[parent]=heap[idx];
                    heap[idx]=temp;
                    idx=parent;
                }else{
                    break;
                }
            }
        }
    }
};
