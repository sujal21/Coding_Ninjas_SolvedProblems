import java.util.* ;
import java.io.*; 
public class Solution {

    static int mod =(int)(Math.pow(10,9)+7);

    public static int findWays(int[] arr,int sum){
        int n=arr.length;

        int[][] dp=new int[n][sum+1];

        if(arr[0]==0){
            dp[0][0]=2;
        }else{
            dp[0][0]=1;
        }

        if(arr[0]!=0 && arr[0]<=sum){
            dp[0][arr[0]]=1;
        }

        for(int i=1;i<n;i++){
            for(int j=0;j<=sum;j++){
                int notTaken=dp[i-1][j];
                int taken=0;
                if(arr[i]<=j){
                    taken=dp[i-1][j-arr[i]];
                }
                dp[i][j]=(taken+notTaken)%mod;
            }
        }
        return dp[n-1][sum];
    }
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
        int totSum=0;

        for(int i=0;i<arr.length;i++){
            totSum=totSum+arr[i];
        }

        if(totSum-d<0 || (totSum-d)%2!=0){
            return 0;
        }

        return findWays(arr,(totSum-d)/2);
	}
}
