import java.util.Arrays;

public class Solution {

    public static int f(int i, int j1, int j2, int r, int c, int[][] grid, int[][][] dp) {

        if (j1 < 0 || j2 < 0 || j1 >= c || j2 >= c) {
            return Integer.MIN_VALUE;
        }

        // Base case
        if (i == r - 1) {
            if (j1 == j2) return grid[i][j1];
            else return grid[i][j2] + grid[i][j1];
        }

        if (dp[i][j1][j2] != -1) return dp[i][j1][j2];

        int maxi = Integer.MIN_VALUE;

        for (int dj1 = -1; dj1 <= 1; dj1++) {
            for (int dj2 = -1; dj2 <= 1; dj2++) {
                int val = 0;
                if (j1 == j2) val = grid[i][j1];
                else val = grid[i][j2] + grid[i][j1];
                val += f(i + 1, j1 + dj1, j2 + dj2, r, c, grid, dp);
                maxi = Math.max(maxi, val);
            }
        }

        return dp[i][j1][j2] = maxi;
    }

    public static int maximumChocolates(int r, int c, int[][] grid) {
        int[][][] dp = new int[r][c][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return f(0, 0, c - 1, r, c, grid, dp);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;

public class Solution {
    public static int maximumChocolates(int r, int c, int[][] grid) {
        int[][][] dp = new int[r][c][c];

        for (int j1 = 0; j1 < c; j1++) {
            for (int j2 = 0; j2 < c; j2++) {
                if (j1 == j2) {
                    dp[r - 1][j1][j2] = grid[r - 1][j1];
                } else {
                    dp[r - 1][j1][j2] = grid[r - 1][j1] + grid[r - 1][j2];
                }
            }
        }

        for (int i = r - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < c; j1++) {
                for (int j2 = 0; j2 < c; j2++) {
                    int maxi = Integer.MIN_VALUE;
                    for (int dj1 = -1; dj1 <= 1; dj1++) {
                        for (int dj2 = -1; dj2 <= 1; dj2++) {
                            int val = 0;
                            if (j1 == j2) {
                                val = grid[i][j1];
                            } else {
                                val = grid[i][j1] + grid[i][j2];
                            }
                            if (j1 + dj1 >= 0 && j1 + dj1 < c && j2 + dj2 >= 0 && j2 + dj2 < c) {
                                val = val + dp[i + 1][j1 + dj1][j2 + dj2];
                            } else {
                                val = Integer.MIN_VALUE;
                            }
                            maxi = Math.max(maxi, val);
                        }
                    }
                    dp[i][j1][j2] = maxi;
                }
            }
        }
        return dp[0][0][c - 1];
    }
}
