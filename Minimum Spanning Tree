import java.util.*;

class Pair {
    int node;
    int dist;

    Pair(int node, int dist) {
        this.node = node;
        this.dist = dist;
    }
}

public class Solution {

    public static int minimumSpanningTree(ArrayList<ArrayList<Integer>> edges, int n) {
        int sum = 0;
        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> Integer.compare(x.dist, y.dist));
        int[] vis = new int[n];

        pq.add(new Pair(0, 0));
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            int node = p.node;
            int dist = p.dist;

            if (vis[node] == 1) {
                continue;
            }
            vis[node] = 1;
            sum = sum + dist;

            for (int i = 0; i < edges.size(); i++) {
                int u = edges.get(i).get(0);
                int v = edges.get(i).get(1);
                int wt = edges.get(i).get(2);

                if (u == node && vis[v] == 0) {
                    pq.add(new Pair(v, wt));
                } else if (v == node && vis[u] == 0) {
                    pq.add(new Pair(u, wt));
                }
            }
        }
        return sum;
    }
}
