import java.util.*;

class Pair{
    int src;
    int parent;
    Pair(int src,int parent){
        this.src=src;
        this.parent=parent;
    }
}
public class Solution {
    static class Graph {

        boolean solve(int src,int v,List<List<Integer>> adj,int[] vis){
            vis[src]=1;
            Queue<Pair> q=new LinkedList<>();
            q.add(new Pair(src,-1));

            while(!q.isEmpty()){
                int node=q.peek().src;
                int parentNode=q.peek().parent;
                q.remove();

                for(Integer it:adj.get(node)){
                    if(vis[it]==0){
                        vis[it]=1;
                        q.add(new Pair(it,node));
                    }else if(it!=parentNode){
                        return true;
                    }
                }
            }
            return false;
        }
        boolean detectCycle(int V, List<List<Integer>> adj) {
            // Write your code here.
            int[] vis=new int[V];
            for(int i=0;i<V;i++){
                if(vis[i]==0){
                    if(solve(i,V,adj,vis)){
                        return true;
                    }
                }
            }
            return false;
        }
    };
}
