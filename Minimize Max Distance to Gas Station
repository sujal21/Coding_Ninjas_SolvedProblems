class Solution {
    public static int numberOfGasStationsRequired(double dist, int[] arr) {
        int n = arr.length;
        int count = 0;

        for (int i = 1; i < n; i++) {
            int numberInBetween = (int) ((arr[i] - arr[i - 1]) / dist);

            if ((arr[i] - arr[i - 1]) == (dist * numberInBetween)) {
                numberInBetween--;
            }

            count += numberInBetween;
        }

        return count;
    }

    public static double MinimiseMaxDistance(int[] arr, int K) {
        int n = arr.length;
        double low = 0;
        double high = 0;

        for (int i = 0; i < n - 1; i++) {
            high = Math.max(high, (double) (arr[i + 1] - arr[i]));
        }

        double precision = 1e-6;

        while (high - low > precision) {
            double mid = low + (high - low) / 2.0;
            int count = numberOfGasStationsRequired(mid, arr);

            if (count > K) {
                low = mid;
            } else {
                high = mid;
            }
        }

        return high;
    }
}
