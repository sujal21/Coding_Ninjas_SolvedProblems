/************************************************************

 Following is the Binary Tree node structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;

     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
 }

 ************************************************************/

import java.util.*;

public class Solution {
    public static void addRight(TreeNode root,ArrayList<Integer> lt){
        Stack<Integer> st=new Stack<>();
        TreeNode temp=root.right;
        while(temp!=null){
            if(isLeaf(temp)==false){
                st.push(temp.data);
            }
            if(temp.right!=null){
                temp=temp.right;
            }else{
                temp=temp.left;
            }
        }
        while(!st.isEmpty()){
            lt.add(st.pop());
        }
    }
    public static void addLeaves(TreeNode root,ArrayList<Integer> lt){
        if(isLeaf(root)==true){
            lt.add(root.data);
            return;
        }
        if(root.left!=null){
            addLeaves(root.left, lt);
        }
        if(root.right!=null){
            addLeaves(root.right,lt);
        }
    }
    public static void addLeft(TreeNode root,ArrayList<Integer> lt){
        TreeNode temp=root.left;
        while(temp!=null){
            if(isLeaf(temp)==false){
                lt.add(temp.data);
            }
            if(temp.left!=null){
                temp=temp.left;
            }else{
                temp=temp.right;
            }
        }
    }
    public static boolean isLeaf(TreeNode root){
        if(root.left==null && root.right==null){
            return true;
        }
        return false;
    }
    public static List<Integer> traverseBoundary(TreeNode root){
        // Write your code here.
        ArrayList<Integer> lt=new ArrayList<>();
        if(isLeaf(root)==false){
            lt.add(root.data);
        }
        addLeft(root,lt);
        addLeaves(root,lt);
        addRight(root,lt);
        return lt;
    }
}
